MonoGiza:

The software takes two monolingual corpra as input and outputs a word-to-word translation table.
It implements decipherment algorithms described in the following papers:

Large Scale Decipherment for Out-of-Domain Machine Translation, Qing Dou and Kevin Knight, EMNLP 2012
Unifying Bayesian Decipherment and Vector Space Models for Improved Decipherment, Qing Dou, Ashish Vaswani, Kevin Knight, and Chris Dyer, ACL 2015


================================================================================
1. Compiling
================================================================================

1. Download the package and unzip it. All necessary dependcies are included in 3rdparty folder.

2. To compile, just type ./compile.sh  This will install the SRILM toolkit and generate a program called slice_with_embeddings.

3. Depending on your GCC version, set environment variable export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:3rdparty/tbb/lib/intel64/gcc4.1
   or export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:3rdparty/tbb/lib/intel64/gcc4.4

================================================================================
2. Example Usage
================================================================================

To get an overview of the options and their usage, run ./demo.sh --help

For quick start, this package inlucdes a demo script "demo.sh"


To decipher a very simple letter substitution cipher, simply type:
./demo.sh data/test.f data/test.e ttable.final [options]

The ttable.final is the output ttable.
Each line is in the following format:
cipher ||| plain ||| p(cipher|plain) p(plain|cipher)


To decipher Japanese phonemes into English
./demo.sh data/mono-shuf.f data/mono.e ttable.final [options]

You might want to run the program with different seeds in parallel, and combine the output ttable to increase
decipherment accuracy:
e.g. cat *.final | python join_table.py > joined.final

You can also decipher languages. The package includes data necessary for a trial run to decipher Spanish into English:
For deciphering foreign languages, using dependency bigrams is better.

1. Dependency cipher(Spanish) bigrams
cipher.es.v10k.100k.3 (bigrams extracted from 100k tokens whose counts are greater than 3)
cipher.es.v10k.100k.1 (bigrams extracted from 100k tokens whose counts are greater than 1)
cipher.es.v10k.1m.3
cipher.es.v10k.1m.1

Each line has two columns:
<bigram counts> <bigrams>

2. Dependency plaintext(English) bigrams
bigram.id.en

2.1 To build a language model from it, type:
3rdparty/srilm/bin/i686-m64/ngram-count -text data/bigram.id.en -text-has-weights -order 2 -lm train.id.lm -kndiscount

2.2 To build a pre-sorted list, type
java -jar -Xmx10g Build_List.jar train.id.lm 2000 > train.id.data

3. Word Embeddings
Spanish: vectors.s50.10k.es
English: vectors.s50.10k.en

4. Vocabulary
The vocabulary file contains id<->word mappings.
Spanish vocabulary: vocab.giga.es.top10k
English vocabulary: vocab.giga.en.top10k

Each line contains two fileds: <id> <word>

To decipher without embeddings:
./slice_with_embeddings --output_ttable ttable.id --lm train.id.lm --sorted_list train.id.data --sorted_list_size 2000 --cipher_bigrams data/cipher.es.v10k.100k.3 --vocab_size 10001 --interval_iteration 10000

To decipher with embeddings:
./slice_with_embeddings --output_ttable ttable.id --lm train.id.lm --sorted_list train.id.data --sorted_list_size 2000 --cipher_bigrams data/cipher.es.v10k.100k.3 --vocab_size 10001 --interval_iteration 10000 --total_iteration 50000 --plain_embeddings data/vectors.s50.10k.en --cipher_embeddings data/vectors.s50.10k.es --use_embeddings 1 --use_uniform_base 0 --fast_mode 1

================================================================================
3. Evaluation
================================================================================

To perform evaluations, you need a gold dictionary file
The package contains a dictionary file obtained from GIZA alignment: lex.f2e
Each line contains <english word> <forgien word> <probability>

to evaluate decipherment accuracy run:
./eval_ttable.sh <gold_ttable> <test_ttable>

